# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-serverless
# app and org for use with dashboard.serverless.com
# app: serverless-example
# org: vijayakumarpsg587

# You can pin your service to only deploy with a specific Serverless version
# # Check out our docs for more details
frameworkVersion: '^2.4.0'

custom:
    webpack:
        webpackConfig: ./webpack.${opt:stage}.config.js

    property1:
    property3:
    globalSchedule: rate(10 minutes)
# Serverless bundle allows us to use EMCAscript 2015,16,17 features - but it is not compatible with serverless-webpack
#  pseudo paramters allows us to use the configured aws params from ~/.aws/config -
plugins:
    - 'serverless-plugin-typescript'
    - serverless-dotenv-plugin
    - serverless-offline
    - serverless-pseudo-parameters

provider:
    name: aws
    runtime: nodejs14.x
    lambdaHashingVersion: 20201221
    stage: ${opt:stage, 'dev'}
    region: ${env:AWS_DEFAULT_REGION}
    environment:
        NODE_ENV: ${self:provider.stage}

# you can overwrite defaults here
# ${env:} resolves value from process.env
# ${opt:} means select from the options provided in the cli

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
# package:
#     patterns:
#         - '!node_modules/**'
#         - '!src/**'
#         - '!package*.json'
#         - handler.js
#    - include-me-dir/**

functions:
    main:
        handler: src/lambda-entrypoint.handler
        events:
            - http:
                  method: GET
                  path: /
                  cors: true
            - http:
                  method: any
                  path: /{proxy+}
                  cors: true
        # environment:
        #     APIG_DEPLOYMENT_ID: ApiGatewayDeployment${sls:instanceId}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
